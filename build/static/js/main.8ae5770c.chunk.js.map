{"version":3,"sources":["components/mock/index.js","alien_components/mock/index.js","actions/index.js","reducers/index.js","store/index.js","components/todo-footer/todo-footer.js","components/todo-footer/index.js","alien_components/todo-footer/index.js","components/todo-item/index.js","alien_components/todo-item/index.js","components/remove/index.js","alien_components/remove/index.js","components/todo-item-u/todo-item-u.js","components/todo-item-u/index.js","alien_components/todo-item-u/index.js","index.js"],"names":["Mock","props","name","MockElement","ReactDOM","render","this","toString","_name","value","console","log","HTMLElement","CHANGE_THEME","initialState","theme","alienApp","state","action","type","store","createStore","getState","TodoFooter","removeCompleted","changeTheme","val","count","hasCompleted","clearBtn","className","onClick","e","themeSelect","onChange","target","to","activeClassName","React","Component","ComponentTodoFooter","connect","dispatch","ReactTodoFooter","event","CustomEvent","dispatchEvent","_count","_hasCompleted","undefined","bind","addEventListener","detail","_router","navigate","stopPropagation","_status","TodoItem","editing","inputRef","createRef","prevProps","prevState","current","focus","todoTitle","todoCompleted","todoEdit","todoRemove","todoToggle","itemClass","editInput","ref","onBlur","setState","onKeyUp","key","checked","onDoubleClick","ReactTodoItem","dispatchCustomEvent","_todoTitle","_todoCompleted","_renderCount","_reactComponent","RemoveBtn","remove","RemoveElement","_remove","TodoItemU","themeStyle","backgroundColor","color","style","ComponentTodoItemU","ReactTodoItemU","unmountComponentAtNode","customElements","define"],"mappings":"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","file":"static/js/main.8ae5770c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Mock(props) {\n  return <span>Hello, {props.name}</span>;\n}\nexport default Mock;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Mock from 'components/mock';\n\nclass MockElement extends HTMLElement {\n    set name(value) {\n      this._name = value;\n      console.log(value);\n      this.render();\n    }\n    get name() {\n      return this._name;\n    }\n  \n    render() {\n      ReactDOM.render(<Mock name={this.name.toString()} />, this);\n    }\n  \n    connectedCallback() {\n      this._name = 'test';\n      this.render();\n    }\n  }\n  \n  export default MockElement;","export const CHANGE_THEME = 'CHANGE_THEME';\n\nexport function changeTheme(theme) {\n    return {\n        theme,\n        type: CHANGE_THEME\n    }\n}\n","import { CHANGE_THEME } from 'actions'\n\nconst initialState = {\n    theme: 'light'\n};\n\nfunction alienApp(state = initialState, action) {\n    switch (action.type) {\n        case CHANGE_THEME:\n            return { ...state, theme: action.theme};\n        default:\n            return state;\n    }\n}\n\nexport default alienApp;","import { createStore } from 'redux';\nimport  alienApp  from 'reducers';\nconst store = createStore(alienApp);\nconsole.log(store.getState());\nexport default store;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nclass TodoFooter extends React.Component {\n  removeCompleted = () => {\n    this.props.removeCompleted();\n  };\n  changeTheme = (val) => {\n    this.props.changeTheme(val);\n  };\n\n  render() {\n    const { count, theme, hasCompleted } = this.props;\n    if (count === 0) {\n      return null;\n    }\n\n    const clearBtn = (hasCompleted) ? (\n      <button\n        className=\"clear-completed\"\n        onClick={(e) => {\n          this.removeCompleted();\n        }}\n      >\n        Clear Completed\n      </button>\n    ) : null;\n\n    \n    const themeSelect = (<select value={theme}\n    onChange={(e) => {\n      this.changeTheme(e.target.value);\n    }}\n  >\n    <option value=\"light\">Light</option>\n    <option value=\"dark\">Dark</option>\n  </select>)\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          <strong>{count}</strong> {count === 1 ? 'item' : 'items'} left\n        </span>\n        <ul className=\"filters\">\n          <li>\n            <NavLink\n              to=\"/\"\n              activeClassName=\"selected\"\n              onClick={(e) => {\n                console.log('/');\n              }}\n            >\n              All\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              to=\"/active\"\n              activeClassName=\"selected\"\n              onClick={(e) => {\n                console.log('/active');\n              }}\n            >\n              Active\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              to=\"/completed\"\n              activeClassName=\"selected\"\n              onClick={(e) => {\n                console.log('/completed');\n              }}\n            >\n              Completed\n            </NavLink>\n          </li>\n        </ul>\n        {clearBtn}\n        {themeSelect}\n      </footer>\n    );\n  }\n}\n\nexport default TodoFooter;\n","import { connect } from 'react-redux';\nimport { changeTheme } from 'actions';\nimport  TodoFooter  from \"components/todo-footer/todo-footer\";\n\nconst mapStateToProps = (state) => {\n    return {\n        theme: state.theme\n    }\n  }\n  \n  const mapDispatchToProps = (dispatch) => {\n    return {\n      changeTheme: (theme) => {\n            dispatch(changeTheme(theme));\n        }\n    }\n  }\n  \n  const ComponentTodoFooter = connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(TodoFooter);\n\n  export default ComponentTodoFooter;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from 'store';\nimport { Provider } from 'react-redux';\nimport ComponentTodoFooter from 'components/todo-footer';\n\nclass ReactTodoFooter extends HTMLElement {\n    set status(value) {\n      this._status = value;\n      this.render();\n    }\n    get status() {\n      return this._status;\n    }\n  \n    set router(value) {\n      this._router = value;\n      this.render();\n    }\n  \n    set count(value) {\n      this._count = value;\n      this.render();\n    }\n    get count() {\n      return this._count;\n    }\n  \n    set hasCompleted(value) {\n      this._hasCompleted = value;\n      this.render();\n    }\n    get hasCompleted() {\n      return this._hasCompleted;\n    }\n  \n    removeCompleted() {\n      var event = new CustomEvent('clear-completed');\n      this.dispatchEvent(event);\n    }\n  \n    render() {\n      const { _count, _hasCompleted, removeCompleted } = this;\n  \n      const propsReady = _count !== undefined && _hasCompleted !== undefined;\n  \n      if (propsReady) {\n        ReactDOM.render(\n          <Provider store={store}>\n            <ComponentTodoFooter\n              count={_count}\n              hasCompleted={_hasCompleted}\n              removeCompleted={removeCompleted.bind(this)}\n            />\n          </Provider>,\n          this\n        );\n      }\n    }\n  \n    connectedCallback() {\n      this.addEventListener('nav-link-click', (e) => {\n        console.log(e);\n        const { to } = e.detail;\n        this._router.navigate([to]);\n        e.stopPropagation();\n      });\n    }\n  }\n  \n  export default ReactTodoFooter;","import React from 'react';\n\n\nclass TodoItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editing: false\n    };\n    this.inputRef = React.createRef();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevState.editing && this.state.editing) {\n      this.inputRef.current.focus();\n    }\n  }\n\n  render() {\n    const {\n      todoTitle,\n      todoCompleted,\n      todoEdit,\n      todoRemove,\n      todoToggle\n    } = this.props;\n\n    let itemClass = todoCompleted ? 'completed' : '';\n    let editInput = '';\n    if (this.state.editing) {\n      itemClass += ' editing';\n      editInput = (\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={todoTitle}\n          ref={this.inputRef}\n          onChange={(e) => {\n            todoEdit(e.target.value);\n          }}\n          onBlur={(e) => {\n            this.setState({ editing: false });\n          }}\n          onKeyUp={(e) => {\n            if (e.key === 'Enter' || e.key === 'Escape') {\n              this.setState({ editing: false });\n            }\n          }}\n        />\n      );\n    }\n\n    return (\n      <li className={itemClass}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={todoCompleted}\n            onChange={(e) => {\n              todoToggle();\n            }}\n          />\n          <label\n            onDoubleClick={(e) => {\n              this.setState({ editing: true });\n            }}\n          >\n            {todoTitle}\n          </label>\n          <button\n            className=\"destroy\"\n            onClick={(e) => {\n              todoRemove();\n            }}\n          ></button>\n        </div>\n        {editInput}\n      </li>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoItem from 'components/todo-item';\nclass ReactTodoItem extends HTMLElement {\n    set todoTitle(value) {\n      this._todoTitle = value;\n      this.render();\n    }\n    get todoTitle() {\n      return this._todoTitle;\n    }\n  \n    set todoCompleted(value) {\n      this._todoCompleted = value;\n      this.render();\n    }\n  \n    get todoCompleted() {\n      return this._todoCompleted;\n    }\n  \n    dispatchCustomEvent(name, detail) {\n      var event =\n        detail !== undefined\n          ? new CustomEvent(name, { detail })\n          : new CustomEvent(name);\n  \n      return this.dispatchEvent(event);\n    }\n  \n    todoToggle() {\n      this.dispatchCustomEvent('todo-toggle');\n    }\n  \n    todoRemove() {\n      this.dispatchCustomEvent('todo-remove');\n    }\n  \n    todoEdit(value) {\n      this.dispatchCustomEvent('todo-update-value', value);\n      this.dispatchCustomEvent('todo-edit');\n    }\n  \n    render() {\n      const {\n        _todoTitle,\n        _todoCompleted,\n        todoEdit,\n        todoToggle,\n        todoRemove\n      } = this;\n  \n      const propsReady = _todoTitle !== null && _todoCompleted !== null;\n  \n      if (propsReady) {\n        this._renderCount++;\n        // this._reactComponent for debugging only\n        this._reactComponent = ReactDOM.render(\n          <TodoItem\n            todoTitle={_todoTitle}\n            todoCompleted={_todoCompleted}\n            todoEdit={todoEdit.bind(this)}\n            todoToggle={todoToggle.bind(this)}\n            todoRemove={todoRemove.bind(this)}\n          />,\n          this\n        );\n        console.log('Render count: %s', this._renderCount);\n        console.log(this._reactComponent);\n      }\n    }\n  \n    connectedCallback() {\n      console.log('Element is connected.');\n      // this._renderCount only for debug\n      this._renderCount = 0;\n  \n      this._todoTitle = null;\n      this._todoCompleted = null;\n      this.addEventListener('todo-update-value', (e) => {\n        console.log('todo-update-value detail: %s', e.detail);\n        this.value = e.detail;\n      });\n    }\n  }\n  \n  export default ReactTodoItem;","import React from 'react';\n\nfunction RemoveBtn(props) {\n  return (\n    <button\n      onClick={(e) => {\n        props.remove();\n      }}\n    >\n      Remove\n    </button>\n  );\n}\n\nexport default RemoveBtn;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RemoveBtn from 'components/remove';\n\nclass RemoveElement extends HTMLElement {\n    set remove(value) {\n      this._remove = value;\n      console.log(value);\n      this.render();\n    }\n  \n    render() {\n      ReactDOM.render(<RemoveBtn remove={this._remove} />, this);\n    }\n  \n    connectedCallback() {\n      this.render();\n    }\n  }\n  \n  export default RemoveElement;","import React from 'react';\n\nclass TodoItemU extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editing: false\n    };\n    this.inputRef = React.createRef();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevState.editing && this.state.editing) {\n      this.inputRef.current.focus();\n    }\n  }\n\n  render() {\n    const {\n      todoTitle,\n      todoCompleted,\n      todoEdit,\n      todoRemove,\n      todoToggle,\n      theme\n    } = this.props;\n\n    let itemClass = todoCompleted ? 'completed' : '';\n    let editInput = '';\n    if (this.state.editing) {\n      itemClass += ' editing';\n      editInput = (\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={todoTitle}\n          ref={this.inputRef}\n          onChange={(e) => {\n            todoEdit(e.target.value);\n          }}\n          onBlur={(e) => {\n            this.setState({ editing: false });\n          }}\n          onKeyUp={(e) => {\n            if (e.key === 'Enter' || e.key === 'Escape') {\n              this.setState({ editing: false });\n            }\n          }}\n        />\n      );\n    }\n    \n    const themeStyle = {\n      backgroundColor : (theme === 'dark')? '#444' :'#fff',\n      color: (theme === 'dark')? '#fff' :'#000',\n    };\n\n    return (\n      <li className={itemClass} style={themeStyle}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={todoCompleted}\n            onChange={(e) => {\n              todoToggle();\n            }}\n          />\n          <label\n            onDoubleClick={(e) => {\n              this.setState({ editing: true });\n            }}\n          >\n            {todoTitle}\n          </label>\n          <button\n            className=\"destroy\"\n            onClick={(e) => {\n              todoRemove();\n            }}\n          ></button>\n        </div>\n        {editInput}\n      </li>\n    );\n  }\n}\n\n\nexport default TodoItemU;\n","import { connect } from 'react-redux';\nimport TodoItemU from 'components/todo-item-u/todo-item-u';\n\nconst mapStateToProps = (state) => {\n    return {\n        theme: state.theme\n    }\n  }\n  \n  const ComponentTodoItemU = connect(\n    mapStateToProps,\n  )(TodoItemU);\n\n  export default ComponentTodoItemU;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from 'store';\nimport { Provider } from 'react-redux';\nimport ComponentTodoItemU from 'components/todo-item-u';\n\nclass ReactTodoItemU extends HTMLElement {\n    set todoTitle(value) {\n      this._todoTitle = value;\n      this.render();\n    }\n    get todoTitle() {\n      return this._todoTitle;\n    }\n  \n    set todoCompleted(value) {\n      this._todoCompleted = value;\n      this.render();\n    }\n  \n    get todoCompleted() {\n      return this._todoCompleted;\n    }\n  \n    dispatchCustomEvent(name, detail) {\n      var event =\n        detail !== undefined\n          ? new CustomEvent(name, { detail })\n          : new CustomEvent(name);\n  \n      return this.dispatchEvent(event);\n    }\n  \n    todoToggle() {\n      this.dispatchCustomEvent('todo-toggle');\n    }\n  \n    todoRemove() {\n      this.dispatchCustomEvent('todo-remove');\n    }\n  \n    todoEdit(value) {\n      this.dispatchCustomEvent('todo-update-value', value);\n      this.dispatchCustomEvent('todo-edit');\n    }\n  \n    render() {\n      const {\n        _todoTitle,\n        _todoCompleted,\n        todoEdit,\n        todoToggle,\n        todoRemove\n      } = this;\n  \n      const propsReady = _todoTitle !== null && _todoCompleted !== null;\n  \n      if (propsReady) {\n        this._renderCount++;\n        // this._reactComponent for debugging only\n        this._reactComponent = ReactDOM.render(\n          <Provider store={store}>\n            <ComponentTodoItemU\n              todoTitle={_todoTitle}\n              todoCompleted={_todoCompleted}\n              todoEdit={todoEdit.bind(this)}\n              todoToggle={todoToggle.bind(this)}\n              todoRemove={todoRemove.bind(this)}\n            />\n          </Provider>,\n          this\n        );\n        console.log('Render count: %s', this._renderCount);\n        console.log(this._reactComponent);\n      }\n    }\n  \n    connectedCallback() {\n      console.log('Element is connected.');\n      // this._renderCount only for debug\n      this._renderCount = 0;\n  \n      this._todoTitle = null;\n      this._todoCompleted = null;\n      this.addEventListener('todo-update-value', (e) => {\n        console.log('todo-update-value detail: %s', e.detail);\n        this.value = e.detail;\n      });\n    }\n  \n    disconnectedCallback() {\n      ReactDOM.unmountComponentAtNode(this);\n    }\n  }\n  \n  export default ReactTodoItemU;","// make custom element definition here\nimport MockElement from 'alien_components/mock';\nimport ReactTodoFooter from 'alien_components/todo-footer';\nimport ReactTodoItem from 'alien_components/todo-item';\nimport RemoveElement from 'alien_components/remove';\nimport ReactTodoItemU from 'alien_components/todo-item-u';\n// import store  from 'store';\n// import { changeTheme } from 'actions';\nconsole.log('0.5.0');\n\n\ncustomElements.define('mock-element', MockElement);\ncustomElements.define('react-todo-footer', ReactTodoFooter);\ncustomElements.define('react-todo-item', ReactTodoItem);\ncustomElements.define('react-todo-item-unmount', ReactTodoItemU);\ncustomElements.define('react-remove-btn', RemoveElement);\n\n// var todoItemElem = document.createElement('react-todo-item-unmount');\n// todoItemElem.todoCompleted = true;\n// todoItemElem.todoTitle = \"bingo\";\n// todoItemElem.todoToggle = () => {console.log('todo-toggle')};\n// todoItemElem.todoRemove = () => {console.log('todo-remove')};\n// todoItemElem.todoEdit = () => {console.log('todo-edit')};\n\n// document.body.append(todoItemElem);\n\n// var todoFooter = document.createElement('react-todo-footer');\n// todoFooter.status = 'All'; \n// todoFooter.router = {};\n// todoFooter.count = 1;\n// todoFooter.hasCompleted = true;\n// todoFooter.removeCompleted = () => {console.log('removeCompleted')}\n\n\n// document.body.append(todoFooter);\n// // setTimeout(()=>{\n// //     store.dispatch(changeTheme('dark'))\n// // }, 3000);"],"sourceRoot":""}