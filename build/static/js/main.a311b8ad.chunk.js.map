{"version":3,"sources":["components/mock.js","components/todo-footer.js","index.js"],"names":["Mock","props","name","MockElement","ReactDOM","render","this","toString","_name","value","console","log","HTMLElement","TodoFooter","count","clearBtn","hasCompleted","className","onClick","removeCompleted","to","activeClassName","e","React","Component","ReactTodoFooter","_count","_hasCompleted","_removeCompleted","addEventListener","_status","customElements","define"],"mappings":"8PAGA,SAASA,EAAKC,GACV,OAAO,wCAAcA,EAAMC,M,IAyBhBC,E,iLAVPC,IAASC,OAAO,kBAACL,EAAD,CAAME,KAAMI,KAAKJ,KAAKK,aAAcD,Q,0CAIpDA,KAAKE,MAAQ,OACbF,KAAKD,W,yBAfFI,GACPH,KAAKE,MAAQC,EACbC,QAAQC,IAAIF,GACZH,KAAKD,U,eAGL,OAAOC,KAAKE,U,eARUI,c,OCHpBC,E,iLAKQ,IAAD,OACCC,EAAQR,KAAKL,MAAMa,MACzB,GAAa,IAAVA,EACC,OAAO,KAOX,IAAMC,EAAYT,KAAKL,MAAMe,aAAe,4BAAQC,UAAU,kBAAkBC,QAAU,WAAO,EAAKjB,MAAMkB,oBAAhE,mBAA8G,GAC1J,OACA,4BAAQF,UAAU,UAClB,0BAAMA,UAAU,cAAa,gCAASH,GAAtC,IAAiE,IAAVA,EAAc,OAAS,QAA9E,SACA,wBAAIG,UAAU,WACV,4BACI,kBAAC,IAAD,CAASG,GAAG,IAAIC,gBAAgB,WAAWH,QAAS,SAACI,GAAOZ,QAAQC,IAAI,OAAxE,QAEJ,4BACI,kBAAC,IAAD,CAASS,GAAG,UAAUC,gBAAgB,WAAYH,QAAS,SAACI,GAAOZ,QAAQC,IAAI,aAA/E,WAEJ,4BACI,kBAAC,IAAD,CAASS,GAAG,aAAaC,gBAAgB,WAAYH,QAAS,SAACI,GAAOZ,QAAQC,IAAI,gBAAlF,eAGPI,O,GA9BgBQ,IAAMC,WAuFhBC,E,iLAfPrB,IAASC,OACL,kBAAC,EAAD,CAAaS,MAAOR,KAAKoB,OAASV,aAAcV,KAAKqB,cAAeR,gBAAiBb,KAAKsB,mBAC1FtB,Q,0CAINA,KAAKuB,iBAAiB,kBAAkB,SAACP,GAAOZ,QAAQC,IAAIW,MAI1DhB,KAAKD,W,2BA5CAI,GACTH,KAAKwB,QAAUrB,EACfH,KAAKD,U,eAGL,OAAOC,KAAKwB,U,0BAGJrB,GACRH,KAAKoB,OAASjB,EACdH,KAAKD,U,eAGL,OAAOC,KAAKoB,S,iCAGGjB,GACfH,KAAKqB,cAAgBlB,EACrBH,KAAKD,U,eAGL,OAAOC,KAAKqB,gB,oCAGMlB,GAClBH,KAAKsB,iBAAmBnB,EACxBH,KAAKD,U,eAGL,OAAOC,KAAKsB,qB,eA/BchB,cCrC9BmB,eAAeC,OAAO,eAAgB7B,GACtC4B,eAAeC,OAAO,oBAAqBP,K","file":"static/js/main.a311b8ad.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from 'react-dom';\n\nfunction Mock(props){\n    return <span>Hello, {props.name}</span>;\n}\n\nclass MockElement extends HTMLElement {\n\n  set name(value) {\n    this._name = value;\n    console.log(value);\n    this.render();\n  }\n  get name() {\n    return this._name;\n  }\n\n    render(){\n        ReactDOM.render(<Mock name={this.name.toString()}/>,this);\n    }\n\n    connectedCallback() {\n        this._name = 'test';\n        this.render();\n    }\n }\n\n\nexport default MockElement;","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport { NavLink } from \"react-router-dom\";\n\nclass TodoFooter extends React.Component {\n  // constructor(props) {\n  //   super(props);\n  //   // this.state = {clicks: 0};\n  // }\n    render() {\n        const count = this.props.count;\n        if(count === 0){\n            return null;\n        }\n        //const alienHandler = (this.props.handler)? this.props.handler : () => {};\n//onClick={(e) => { this.setState({clicks: this.state.clicks +1 }) } }\n//title={ this.state.clicks}\n\n\n        const clearBtn = (this.props.hasCompleted)? <button className=\"clear-completed\" onClick= {() => {this.props.removeCompleted();}}>Clear Completed</button>:'';\n        return (\n        <footer className=\"footer\" >\n        <span className=\"todo-count\"><strong>{count}</strong> {count === 1 ? 'item' : 'items'} left</span>\n        <ul className=\"filters\">\n            <li>\n                <NavLink to=\"/\" activeClassName=\"selected\" onClick={(e) => {console.log(\"/\");}} >All</NavLink>\n            </li>\n            <li>\n                <NavLink to=\"/active\" activeClassName=\"selected\"  onClick={(e) => {console.log(\"/active\");}}>Active</NavLink>\n            </li>\n            <li>\n                <NavLink to=\"/completed\" activeClassName=\"selected\"  onClick={(e) => {console.log(\"/completed\")}} >Completed</NavLink>\n            </li>\n        </ul>\n        {clearBtn}\n        </footer>\n        );\n    }\n}\n \nclass ReactTodoFooter extends HTMLElement {\n\n  set status(value) {\n    this._status = value;\n    this.render();\n  }\n  get status() {\n    return this._status;\n  }\n\n  set count(value) {\n    this._count = value;\n    this.render();\n  }\n  get count() {\n    return this._count;\n  }\n\n  set hasCompleted(value) {\n    this._hasCompleted = value;\n    this.render();\n  }\n  get hasCompleted() {\n    return this._hasCompleted;\n  }\n\n  set removeCompleted(value) {\n    this._removeCompleted = value;\n    this.render();\n  }\n  get removeCompleted() {\n    return this._removeCompleted;\n  }\n\n    render(){\n\n        ReactDOM.render(\n            <TodoFooter  count={this._count}  hasCompleted={this._hasCompleted} removeCompleted={this._removeCompleted}/>,\n            this);\n    }\n\n    connectedCallback() {\n      this.addEventListener('nav-link-click', (e) => {console.log(e)});  \n      // const event = new CustomEvent('nav-link-click', { detail: {msg: \"bingo!\"}, bubbles: true });\n      // this.dispatchEvent(event); \n        \n        this.render();\n    }\n }\n\n\nexport default ReactTodoFooter;","// make custom element definition here\nimport MockElement from 'components/mock';\nimport ReactTodoFooter from 'components/todo-footer';\ncustomElements.define(\"mock-element\", MockElement);\ncustomElements.define(\"react-todo-footer\", ReactTodoFooter);\n"],"sourceRoot":""}